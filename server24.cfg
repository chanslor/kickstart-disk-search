#Kickstart Installation that build rpms

install
url --url=http://10.0.0.1/ol7
network --onboot yes --bootproto=static --ip=10.0.0.125 --netmask=255.255.255.0 --gateway=10.0.0.1 --nameserver=10.0.0.1 --noipv6 --hostname=server24

text
lang en_US
keyboard us

rootpw  --iscrypted $6$hhPTEpj6$RnG4LVexvkgi3hj/FFKCJbGTpcxHQkcnTMKDQeycUVQysDrk1hct3I25CuKQRTH5GJmtZ/BhuP/rslULXn1lN.

eula --agreed
firstboot --enable

services --enabled=sshd,postfix,gpm,chronyd
services --disabled=ntpd

firewall  --disabled
authconfig --enableshadow --passalgo=sha512
selinux --disabled
timezone --utc America/Chicago



%packages
@core
bash-completion
vim
wget
gpm
chrony
mlocate
-iwl105-firmware
-iwl6000g2b-firmware
-iwl6000g2a-firmware
-iwl4965-firmware
-iwl5000-firmware
-iwl2000-firmware
-iwl7260-firmware
-iwl3160-firmware
-iwl135-firmware
-iwl5150-firmware
-iwl1000-firmware
-iwl7265-firmware
-iwl2030-firmware
-iwl6050-firmware
-iwl100-firmware
-iwl3945-firmware
-iwl6000-firmware
-kexec-tools
%end

#The pre-install script is not run in the change root environment.
%pre --interpreter /usr/bin/bash

TTY=`tty`
exec < $TTY > $TTY 2> $TTY

#1 Byte = 8 Bit
#1 Kilobyte = 1,024 Bytes
#1 Megabyte = 1,048,576 Bytes
#1 Gigabyte = 1,073,741,824 Bytes
#1 Terabyte = 1,099,511,627,776 Bytes

# drive must be larger than INSTALLSIZE to install OS
# Note: the lsblk will read the entire size of device
#INSTALLSIZE=943718400  #900MB
#INSTALLSIZE=64424509440  #60GB
#INSTALLSIZE=107374182400 #100GB
#INSTALLSIZE=128849018880 #120GB
INSTALLSIZE=20401094656 #19GB for testing vm's

INSTALLDISK=()

declare -A disk_values
declare -A small_disks
declare -A install_values

do_summary () {
	echo
	lsblk -a -i
	echo
}

while read disk size
do

	RAW_SIZE=$(printf '%d\n' $size  2>/dev/null) #Remove the floating points
	echo "DISK: $disk SIZE: $RAW_SIZE "

	#Is the disk large enough for install
	if (($RAW_SIZE > $INSTALLSIZE )); then

	###If disk is large enough to install OS, then add to array
	##echo "Disk $disk is greater than $INSTALLSIZE"
	##INSTALLDISK+=($disk $RAW_SIZE)

	#Add the vaules to assiocative array
	#disk_values[$disk]+="$RAW_SIZE"
	disk_values[$RAW_SIZE]+="$disk" #disk is key
	INSTALLDISKS+=($disk)
	TOTALDISKS+=($disk)
	#2disk_values[$disk]+="$RAW_SIZE" #value is key. This fails,we ended up using pipe to sort

	else
	echo "Disk $disk is smaller than $INSTALLSIZE"
	small_disks[$RAW_SIZE]+="$disk" #disk is key
	BOOTDISKS+=($disk)
	TOTALDISKS+=($disk)
	fi

	#Add the vaules to assiocative array
	#disk_values[$disk]+="$RAW_SIZE"
	#disk_values[disk]=size
	#disk_values=([apple]='100 dollars' [orange]='150 dollars')


done < <(lsblk -a -b -o NAME,SIZE | egrep "^sd|^hd|^vd" | awk ' { print $1 " " $2 } ')

clear
do_summary

echo
echo
echo -en "\\033[1;32m Search complete.  \\033[0;39m"
echo
echo

#Determine if all disk are too small
tLenD=${#INSTALLDISKS[@]}
tLenB=${#BOOTDISKS[@]}
tLenT=${#TOTALDISKS[@]}

if [ ${tLenT} -eq ${tLenB} ] ; then
	echo "All disks are smaller than the INSTALLSIZE of $INSTALLSIZE"
	echo "Set the INSTALLSIZE smaller or check that all disks are present."
	exit 1
fi



#	echo "This is the size of disk_values ass array:"
#	echo ${#disk_values[@]}

#echo "${#INSTALLDISK[@]}"

print_final_install_disk () {

	FINALINSTALLDISK=$(
	for K in "${!disk_values[@]}"
	do echo "$K ${disk_values[$K]}"
	done | sort -n -k1 | head -1 | awk ' { print $2 } ')
	echo
	echo -e "\\033[1;42m We will continue with installation on: \\033[0;39m $FINALINSTALLDISK"
	echo

cat << EOF > /tmp/part-include
ignoredisk --only-use=$FINALINSTALLDISK
zerombr
clearpart --all --drives=$FINALINSTALLDISK --initlabel
bootloader --location=mbr --driveorder=$FINALINSTALLDISK --append="crashkernel=auto rhgb quiet"
part /boot --fstype="ext4" --size=512
part pv.01 --size=1 --grow
volgroup root_vg --pesize=4096 pv.01
logvol / --fstype=ext4 --name=root_lv --vgname=root_vg --size=1 --grow
EOF


	sleep 10
}

final_disk_details () {
	parted -s /dev/$FINALINSTALLDISK print
}

if [ ${#disk_values[@]} -gt 1 ] ; then
	echo
	echo "You have more than one install disk:"
	echo "------------------------------------"

	#Since there is more than one large disk for installation
	#We will install on the smallest one in the list.

	#Print the values
	for K in "${!disk_values[@]}"
	do echo "The Hard Disk ${disk_values[$K]} is $K "
	done

	#Determine the smallest of the largest disks
	echo
	echo "The smallest of the larger disk is:"

	for K in "${!disk_values[@]}"
	do echo "$K ${disk_values[$K]}"
	done | sort -n -k1 | head -1 | awk ' { print $2 } '

	print_final_install_disk
	final_disk_details
else
	print_final_install_disk
	final_disk_details
fi

echo
%end

#%pre
#echo "# Ignore USB drives if present" > /tmp/ignoredisk.ks
#usb=`ls -l /dev/disk/by-path/pci-*-usb-* | wc -l`
#if [ $usb -gt 0 ]
#then
#echo "ignoredisk --drives=/dev/disk/by-path/pci-*-usb-*" > /tmp/ignoredisk.ks
#fi
#%end

#%include /tmp/ignoredisk.ks
######################################################
###### Disk Setup
######################################################
%include /tmp/part-include
%include /tmp/swap



%pre
#!/bin/bash
# Set swap size
mem=$(cat /proc/meminfo|sed -n "s/MemTotal: *\([0-9]\+\) kB/\1/p")
size=$(( $mem / 2 / 1024 ))
if [ $mem -ge 4194304 ]; then
echo "logvol swap --fstype swap --name=swap_lv --vgname=root_vg --size=$size" > /tmp/swap
else
echo "logvol swap --fstype swap --name=swap_lv --vgname=root_vg --size=2048" > /tmp/swap
fi
%end

# DISABLE KDUMP ON TEST SYSTEMS
%addon com_redhat_kdump --disable
%end

%post
exec 1> /dev/console
echo
echo
echo
echo "-------------------------------------------------------"
echo "$FINALINSTALLDISK"
cat /tmp/finaldisk.txt
echo
echo
echo
%end

%post
cat >> /root/.bash_history << EOF
PS1="\[\033[1;94m\]\\\$HOSTNAME\[\033[0;31m\](\\\$USER)\[\033[0;33m\]:\\\$PWD \[\033[0m\]\\$ "
alias ll='ls -alrth --color=always'
EOF
cat >> /etc/skel/.bashrc << EOF
PS1="\[\033[1;94m\]\\\$HOSTNAME\[\033[0;31m\](\\\$USER)\[\033[0;33m\]:\\\$PWD \[\033[0m\]\\$ "
alias ll='ls -alrth --color=always'
EOF

exec 1> /dev/console
clear


rpm -ivh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm

rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org

rpm -ivh  https://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm


date
echo "-------------------------------"
echo
wget -O /root/.git-prompt.sh  http://10.0.0.1/custom/git-prompt-on-vms/.git-prompt.sh
echo "-------------------------------"
echo
wget -O /root/.bashrc  http://10.0.0.1/custom/git-prompt-on-vms/.bashrc
echo "-------------------------------"
echo
wget -O /etc/yum.repos.d/ol7.repo  http://10.0.0.1/custom/ol7.repo
echo "-------------------------------"
echo
wget -O /etc/yum.repos.d/elrepo.repo  http://10.0.0.1/custom/elrepo.repo
echo "-------------------------------"
echo
wget -O /etc/pki/rpm-gpg/RPM-GPG-KEY-elrepo.org  http://10.0.0.1/custom/elrepo.repo
echo "-------------------------------"
echo
wget -O /etc/yum.repos.d/epel.repo  http://10.0.0.1/custom/epel.repo
echo "-------------------------------"
echo
wget -O /etc/yum.repos.d/public-yum-ol7.repo  http://10.0.0.1/custom/public-yum-ol7.repo
echo "-------------------------------"
echo
wget -O /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7  http://10.0.0.1/custom/RPM-GPG-KEY-EPEL-7
echo "-------------------------------"
echo


%end


%post --log=/root/ems-post-final01.txt
cat >> /etc/sysctl.d/ipv6.conf << EOF
net.ipv6.conf.all.disable_ipv6 = 1
EOF

cat >> /etc/sysctl.d/icmp.conf << EOF
net.ipv4.icmp_echo_ignore_broadcasts = 1
EOF
%end


%post --log=/root/yum-installs.txt
exec 1> /dev/console
clear
date
echo "-------------------------------"
yum -y install yum-utils git autoconf
yum -y groupinstall "Development tools"
%end

%post --log=/root/kernel4-installs.txt

exec 1> /dev/console
clear
date
echo "-------------------------------"
echo

yum -y remove kernel-tools-libs kernel-headers kernel-tools


yum install -y kernel-ml kernel-ml-devel kernel-ml-tools-libs-devel kernel-ml-tools-libs kernel-ml-tools kernel-ml-headers

grub2-set-default 0

yum -y install gcc gcc-c++ gcc-gfortran glibc-devel glibc-headers
yum -y install elfutils-libelf-devel iperf cmake3

%end


%post --log=/root/install-rpm-build-tools-SPEC.txt

yum -y install rpm-build rpmdevtools

cd /root && /usr/bin/rpmdev-setuptree

mkdir -p /root/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}

%end




%post --log=/root/add-keys.txt
cd
ssh-keygen -t rsa -f /root/.ssh/id_rsa -N ''

echo 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCeitOJI+ncEww0dDCVrpL+unlUp+X1EIqzCT9ys+PmQTSZDwjLjBteQYqIoXrhFf51laHuYgwLZhBy46wHnn/Kpvl2PRhDSaNtTxnXk3ot0B/g8CI2z3/gs+tyxK1kITGf22tTeRKV1EhG24KjWRnEt/bi9V5da44Y9axGgmtiOBdZncSqq5Wap4Sgb1USNai6gQMUHhrw8uIzRDNTrwvKKZXZIzDMokFns75LhWj8CE6bRkwTZIKEtXO9GuXOUqyqHBCa8YtgK9o+J+I+U6xI9DA2sOePvQ62JMaYtEdbm39bcbwwjRQSrCbfCIqQSXczgXjjSsl92JEIB+Lu0g/r lsnahcdm@lnx' > /root/.ssh/authorized_keys


%end




reboot
