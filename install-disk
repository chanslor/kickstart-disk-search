#! /bin/bash          

#1 Byte = 8 Bit
#1 Kilobyte = 1,024 Bytes
#1 Megabyte = 1,048,576 Bytes
#1 Gigabyte = 1,073,741,824 Bytes
#1 Terabyte = 1,099,511,627,776 Bytes

# drive must be larger than INSTALLSIZE to install OS
# Note: the lsblk will read the entire size of device
#INSTALLSIZE=943718400  #900MB
#INSTALLSIZE=64424509440  #60GB
#INSTALLSIZE=107374182400 #100GB
#INSTALLSIZE=128849018880 #120GB
INSTALLSIZE=20401094656 #19GB for testing vm's

INSTALLDISK=()

declare -A disk_values
declare -A small_disks
declare -A install_values

do_summary () {
	echo
	lsblk -a -i
	echo
}

while read disk size
do          

	RAW_SIZE=$(printf '%d\n' $size  2>/dev/null) #Remove the floating points
	echo "DISK: $disk SIZE: $RAW_SIZE "

	#Is the disk large enough for install
	if (($RAW_SIZE > $INSTALLSIZE )); then
	
	###If disk is large enough to install OS, then add to array
	##echo "Disk $disk is greater than $INSTALLSIZE"
	##INSTALLDISK+=($disk $RAW_SIZE)

	#Add the vaules to assiocative array
	#disk_values[$disk]+="$RAW_SIZE"
	disk_values[$RAW_SIZE]+="$disk" #disk is key
	INSTALLDISKS+=($disk)
	TOTALDISKS+=($disk)
	#2disk_values[$disk]+="$RAW_SIZE" #value is key. This fails,we ended up using pipe to sort

	else
	echo "Disk $disk is smaller than $INSTALLSIZE"
	small_disks[$RAW_SIZE]+="$disk" #disk is key
	BOOTDISKS+=($disk)
	TOTALDISKS+=($disk)
	fi

	#Add the vaules to assiocative array
	#disk_values[$disk]+="$RAW_SIZE"
	#disk_values[disk]=size
	#disk_values=([apple]='100 dollars' [orange]='150 dollars')


done < <(lsblk -a -b -o NAME,SIZE | egrep "^sd|^hd|^vd" | awk ' { print $1 " " $2 } ')

clear
do_summary

echo
echo
echo -en "\\033[1;32m Search complete.  \\033[0;39m"
echo
echo

#Determine if all disk are too small
tLenD=${#INSTALLDISKS[@]}
tLenB=${#BOOTDISKS[@]}
tLenT=${#TOTALDISKS[@]}

if [ ${tLenT} -eq ${tLenB} ] ; then
	echo "All disks are smaller than the INSTALLSIZE of $INSTALLSIZE"
	echo "Set the INSTALLSIZE smaller or check that all disks are present."
	exit 1
fi



#	echo "This is the size of disk_values ass array:"
#	echo ${#disk_values[@]}

#echo "${#INSTALLDISK[@]}"

print_final_install_disk () {

	FINALINSTALLDISK=$(
	for K in "${!disk_values[@]}"
	do echo "$K ${disk_values[$K]}"
	done | sort -n -k1 | head -1 | awk ' { print $2 } ')
	echo
	echo -e "\\033[1;42m We will continue with installation on: \\033[0;39m $FINALINSTALLDISK"
	sleep 10
	echo
}

final_disk_details () {
	parted -s /dev/$FINALINSTALLDISK print
}

if [ ${#disk_values[@]} -gt 1 ] ; then
	echo
	echo "You have more than one install disk:"
	echo "------------------------------------"

	#Since there is more than one large disk for installation
	#We will install on the smallest one in the list.

	#Print the values
	for K in "${!disk_values[@]}"
	do echo "The Hard Disk ${disk_values[$K]} is $K "
	done

	#Determine the smallest of the largest disks
	echo
	echo "The smallest of the larger disk is:"

	for K in "${!disk_values[@]}"
	do echo "$K ${disk_values[$K]}"
	done | sort -n -k1 | head -1 | awk ' { print $2 } '

	print_final_install_disk	
	final_disk_details
else
	print_final_install_disk
	final_disk_details
fi

echo


